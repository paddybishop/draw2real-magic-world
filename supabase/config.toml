
# A string used to distinguish different Supabase projects on the same host. Defaults to the
# working directory name when running `supabase init`.
project_id = "nrrtzvmvgtbjomdxlufl"

[api]
enabled = true
# Port to use for the API URL.
port = 54321
# Schemas to expose in your API. Tables, views and stored procedures in this schema will get API
# endpoints. public and storage are always included.
schemas = ["public", "storage", "graphql_public"]
# Extra schemas to add to the search_path of every request. public is always included.
extra_search_path = ["public", "extensions"]
# The maximum number of rows returns from a view, table, or stored procedure. Limits payload size
# for accidental or malicious requests.
max_rows = 1000

[db]
# Port to use for the local database URL.
port = 54322
# Port used by db diff command to initialise the shadow database.
shadow_port = 54320
# The database major version to use. This has to be the same as your remote database's. Run `SHOW
# server_version;` on the remote database to check.
major_version = 15

[db.pooler]
enabled = false
# Port to use for the local connection pooler.
port = 54329
# The maximum number of connections the pooler will keep open with the database. Default (and
# minimum) is 15.
pool_size = 15
# Time to hold an idle connection with the database, in seconds.
# Defaults to 600 seconds and capped by db.query_end_timeout.
idle_timeout = 600
# Maximum lifetime of a connection with the database, in seconds.
# Defaults to 3600 seconds and capped by db.query_end_timeout.
max_lifetime = 3600

[realtime]
enabled = true
# Bind realtime via either IPv4 or IPv6. (default: IPv6)
# ip_version = "IPv6"
# The maximum number of concurrent clients that an instance allows. Default: 100.
max_clients = 100
# The interval between sending ping messages to clients. Default: 5s. Disable with 0.
heartbeat_interval = 5
# How long to wait for a ping response from a client before disconnecting it. Default: 30s.
# Keep in mind the client will attempt to reconnect so this is not so important unless you want to
# reduce load on the server.
ping_timeout = 30
# The database pool configuration.
[realtime.db_pool]
# Maximum number of connections the realtime service maintains with the database. Default: 40.
max_connections = 40
# Number of concurrent queries realtime will send to the database before queueing. Default: 500.
max_concurrent_queries = 500
# Whether to enable IAM integration to use identity tokens in place of server trusts. Note this will
# send the user's JWT to the database with role assumption disabled.
enable_iam_identity_tokens = false

[storage]
enabled = true
# The maximum file size allowed (e.g. "5MB", "500KB").
file_size_limit = "50MiB"

[auth]
enabled = true
# The base URL of your website. Used as an allow-list for redirects and for constructing URLs used
# in emails.
site_url = "http://localhost:3000"
# A list of *exact* URLs that auth providers are permitted to redirect to post authentication.
additional_redirect_urls = ["https://localhost:3000", "https://lovable.dev"]
# How long tokens are valid for, in seconds. Defaults to 3600 (1 hour), maximum 604,800 (1 week).
jwt_expiry = 3600
# If disabled, the refresh token will never expire.
enable_refresh_token_rotation = true
# Allows refresh tokens to be reused after expiry, up to the specified interval in seconds.
# Requires enable_refresh_token_rotation = true.
refresh_token_reuse_interval = 10
# Allow/disallow new user signups to your project.
enable_signup = true

[auth.email]
# Allow/disallow new user signups via email to your project.
enable_signup = true
# If enabled, a user will be required to confirm any email change on both the old, and new email
# addresses. If disabled, only the new email is required to confirm.
double_confirm_changes = true
# If enabled, users need to confirm their email address before signing in.
enable_confirmations = false

[auth.sms]
# Allow/disallow new user signups via SMS to your project.
enable_signup = true
# If enabled, users need to confirm their phone number before signing in.
enable_confirmations = false

[auth.external.apple]
enabled = false
# JSON Web Key URL for Apple provider
jwks_url = "https://appleid.apple.com/auth/keys"

[auth.external.azure]
enabled = false
client_id = ""
# URL for the authorization URL for azure oauth login such as:
# `https://login.microsoftonline.com/{your_tenant_name}/oauth2/v2.0/authorize`
url = ""
# URL for retrieving user tokens such as:
# `https://login.microsoftonline.com/{your_tenant_name}/oauth2/v2.0/token`
token_url = ""

[auth.external.bitbucket]
enabled = false
client_id = ""
secret = ""

[auth.external.discord]
enabled = false
client_id = ""
secret = ""

[auth.external.facebook]
enabled = false
client_id = ""
secret = ""

[auth.external.github]
enabled = false
client_id = ""
secret = ""

[auth.external.gitlab]
enabled = false
client_id = ""
secret = ""

[auth.external.google]
enabled = false
client_id = ""
secret = ""

[auth.external.twitch]
enabled = false
client_id = ""
secret = ""

[auth.external.twitter]
enabled = false
client_id = ""
secret = ""

[auth.external.slack]
enabled = false
client_id = ""
secret = ""

[auth.external.spotify]
enabled = false
client_id = ""
secret = ""

[auth.external.workos]
enabled = false
client_id = ""
secret = ""

[auth.external.zoom]
enabled = false
client_id = ""
secret = ""

[analytics]
enabled = false
port = 54327
vector_port = 54328
# Configure one of these backends
backend = "postgres"
# backend = "bigquery"

# Configures the postgres backend to store analytics data
[analytics.postgres]
# Configures analytics collection to use an existing database. By default a local
# db dev is automatically provisioned.
# connection_string = "postgresql://supabase:postgres@localhost:5432/postgres"

# Enables query collection into the analytics system. Requires a restart of the service.
[analytics.options]
query_collection = true

# Configure clickhouse client. Only required for clickhouse backend.
# "endpoint" can be ip:port or your clickhouse domain
# "database" is the target database. Schema is hardcoded to public
# [analytics.clickhouse]
# endpoint = ""
# user = ""
# password = ""
# database = "default"

# Configure bigquery. Only required for bigquery backend.
# [analytics.bigquery]
# project_id = ""
# dataset_id = ""
# # The token can be any of the following:
# # 1. A GCP service account key file (json) - the path to the key file (.json)
# # 2. A GCP access token - A valid GCP access token
# # Either the key file or the access token is required.
# key_file = ""
# # If access_token is provided, key_file is ignored.
# access_token = ""

[experimental]
# Configures Postgres storage to run PostgREST. This needs to be the same as your Postgres
# connection string.
postgres_connection_string = "postgresql://postgres:postgres@localhost:54322/postgres"
# (Beta) Generate TypeScript types for APIs in /types folder.
# Requires OPENAPI_SPEC to be set on PostgREST with `create_schemas_from_openapi_schema = true`
# The TypeScript type generation in complete beta and only for experimentation only.
generate_types = true

[functions]
[functions.generate-image]
verify_jwt = false
[functions.makeReal]
verify_jwt = false
